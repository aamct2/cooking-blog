{"version":3,"sources":["webpack:///./src/templates/blog-list.tsx","webpack:///./src/components/BlogSummary.tsx","webpack:///./src/components/Header.tsx","webpack:///./src/components/NavBar.tsx","webpack:///./src/components/Layout.tsx"],"names":["BlogList","data","pageContext","posts","allMarkdownRemark","edges","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","map","node","date","frontmatter","excerpt","key","id","slug","fields","title","to","rel","blogListQuery","BlogSummary","summary","blogExcerpt","Header","siteTitle","className","style","margin","NavBar","Layout","children","site","siteMetadata","Date","getFullYear","href"],"mappings":"gVAuDeA,UA3CV,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACNC,EAAQF,EAAKG,kBAAkBC,MAE7BC,EAA0BJ,EAA1BI,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAFmBJ,EAAbO,SAGfC,EACJJ,EAAc,GAAM,EAAI,QAAU,OAASA,EAAc,GAAGK,WACxDC,GAAYL,EAAU,SAAW,QAAUD,EAAc,GAAGK,WAElE,OACE,kBAAC,IAAD,KACGR,EAAMU,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACZ,OACE,kBAAC,IAAD,CACEC,KAAMD,EAAKE,YAAYD,KACvBE,QAASH,EAAKG,QACdC,IAAKJ,EAAKK,GACVC,KAAMN,EAAKO,OAAOD,KAClBE,MAAOR,EAAKE,YAAYM,YAK5Bf,GACA,kBAAC,OAAD,CAAMgB,GAAIb,EAAUc,IAAI,QAAxB,oBASAhB,GACA,kBAAC,OAAD,CAAMe,GAAIX,EAAUY,IAAI,QAAxB,iBAUD,IAAMC,EAAgB,c,kCCzD7B,qCAwCeC,IAbV,SAAC,GAAmC,IAAjCX,EAAiC,EAAjCA,KAAME,EAA2B,EAA3BA,QAASG,EAAkB,EAAlBA,KAAME,EAAY,EAAZA,MACrBK,EArBR,SAAqBV,GACnB,OAAIA,EACK,2BAAIA,GAGN,KAgBSW,CAAYX,GAE5B,OACE,6BACE,kBAAC,OAAD,CAAMM,GAAIH,GACR,4BAAKE,EAAQ,MAAQP,IAEtBY,K,6ICnBQE,EARiC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAC9C,4BAAQC,UAAU,UAChB,wBAAIC,MAAO,CAAEC,OAAQ,IACnB,kBAAC,OAAD,CAAMV,GAAG,KAAKO,MCILI,G,UARU,WACvB,OACE,yBAAKH,UAAU,UACb,kBAAC,OAAD,CAAMR,GAAG,SAAT,WC8BSY,IAxByC,SAAC,GAAiB,UAAfC,EAAe,EAAfA,SACnDnC,EAAO,OAUb,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQ6B,UAAS,oBAAE7B,EAAKoC,YAAP,iBAAE,EAAWC,oBAAb,aAAE,EAAyBhB,aAA3B,QAAoC,KACrD,8BAAOc,GACP,sCACK,IAAIG,MAAOC,cADhB,eAC2C,IACzC,uBAAGC,KAAK,4BAAR","file":"component---src-templates-blog-list-tsx-63009883b4afeb3c62b2.js","sourcesContent":["import { Link, graphql } from 'gatsby'\nimport { BlogListQuery } from './__generated__/BlogListQuery'\nimport BlogSummary from '../components/BlogSummary'\nimport Layout from '../components/Layout'\nimport React from 'react'\n\n/**\n * Template page containing a list of blog posts\n */\nconst BlogList: React.FC<{\n  data: BlogListQuery\n  pageContext: { currentPage: number; numPages: number }\n}> = ({ data, pageContext }) => {\n  const posts = data.allMarkdownRemark.edges\n\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage =\n    currentPage - 1 === 1 ? '/blog' : '../' + (currentPage - 1).toString()\n  const nextPage = (isFirst ? '/blog/' : '../') + (currentPage + 1).toString()\n\n  return (\n    <Layout>\n      {posts.map(({ node }) => {\n        return (\n          <BlogSummary\n            date={node.frontmatter.date}\n            excerpt={node.excerpt}\n            key={node.id}\n            slug={node.fields.slug}\n            title={node.frontmatter.title}\n          />\n        )\n      })}\n\n      {!isFirst && (\n        <Link to={prevPage} rel=\"prev\">\n          ← Previous Page\n        </Link>\n      )}\n      {/* {Array.from({ length: numPages }, (_, i) => (\n        <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? '' : i + 1}`}>\n          {i + 1}\n        </Link>\n      ))} */}\n      {!isLast && (\n        <Link to={nextPage} rel=\"next\">\n          Next Page →\n        </Link>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const blogListQuery = graphql`\n  query BlogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"yyyy-MM-DD\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","import { Link } from 'gatsby'\nimport React from 'react'\n\n/**\n * Generates an excerpt summary representation\n * @param excerpt Excerpt text\n */\nfunction blogExcerpt(excerpt: string | null): JSX.Element | null {\n  if (excerpt) {\n    return <p>{excerpt}</p>\n  }\n\n  return null\n}\n\n/**\n * Summary of a blog post\n * @param date Date of the blog post as a formatted `string`\n * @param excerpt Excerpt text from the blog\n * @param slug Slug (relative URL) for the post\n * @param title Title of hte blog\n */\nconst BlogSummary: React.FC<{\n  date: string\n  excerpt: string | null\n  slug: string\n  title: string\n}> = ({ date, excerpt, slug, title }) => {\n  const summary = blogExcerpt(excerpt)\n\n  return (\n    <div>\n      <Link to={slug}>\n        <h4>{title + ' - ' + date}</h4>\n      </Link>\n      {summary}\n    </div>\n  )\n}\n\nexport default BlogSummary\n","import './Header.scss'\nimport { Link } from 'gatsby'\nimport React from 'react'\n\n/**\n * Header of a page\n * @param siteTitle Title of the website\n */\nconst Header: React.FC<{ siteTitle: string }> = ({ siteTitle }) => (\n  <header className=\"Header\">\n    <h1 style={{ margin: 0 }}>\n      <Link to=\"/\">{siteTitle}</Link>\n    </h1>\n  </header>\n)\n\nexport default Header\n","import './NavBar.scss'\nimport { Link } from 'gatsby'\nimport React from 'react'\n\n/**\n *\n */\nconst NavBar: React.FC = () => {\n  return (\n    <nav className=\"NavBar\">\n      <Link to=\"/blog\">Blog</Link>\n    </nav>\n  )\n}\n\nexport default NavBar\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Header from './Header'\nimport NavBar from './NavBar'\nimport React from 'react'\nimport { SiteTitleQuery } from './__generated__/SiteTitleQuery'\n\n/**\n * Standard page layout template\n */\nconst Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `) as SiteTitleQuery\n\n  return (\n    <>\n      <NavBar />\n      <Header siteTitle={data.site?.siteMetadata?.title ?? ''} />\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with{' '}\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </footer>\n    </>\n  )\n}\n\nexport default Layout\n"],"sourceRoot":""}