{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx"],"names":["BlogPost","data","post","title","frontmatter","date","author","siteData","siteMetadata","tags","sort","tagsSEO","map","tag","name","content","schemaSEO","type","JSON","stringify","datePublished","headline","blogSEO","meta","script","dateTime","className","key","link","kebabCase","dangerouslySetInnerHTML","__html","html","query"],"mappings":"8OAmFeA,UA1CqC,SAAC,GAAa,kBAAXC,EAAW,EAAXA,KAC/CC,EAAOD,EAAKC,KACZC,EAAK,UAAGD,aAAH,EAAGA,EAAME,YAAYD,aAArB,QAA8B,gBACnCE,EAAI,QAAI,EAAAH,aAAJ,EAAIA,EAAME,YAAYC,YAAtB,QAAyC,GAC7CC,EAAM,oBAAGL,EAAKM,gBAAR,aAAG,EAAeC,aAAaF,cAA/B,QAAyC,GAC/CG,GAAO,UAACP,SAAD,UAACA,EAAME,mBAAP,aAAC,EAAmBK,YAApB,QAA4B,IAAIC,OACvCC,EAAUF,EAAKG,KAAI,SAAAC,GACvB,MAAO,CACLC,KAAM,cACNC,QAASF,UAAO,OAGdG,EAvCR,SACEb,EACAE,EACAC,GAKA,MAAO,CACLW,KAAM,sBACNF,QAASG,KAAKC,UAAU,CACtB,WAAY,oBACZ,QAAS,cACTb,OAAQ,CACN,QAAS,SACTQ,KAAMR,GAERc,cAAef,EACfgB,SAAUlB,EACVW,KAAMX,KAoBQmB,CAAQnB,EAAOE,EAAMC,GAEvC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKH,MAAOA,EAAOc,KAAK,UAAUM,KAAMZ,EAASa,OAAQR,IACzD,iCACE,4BAAKb,GACL,0BAAMsB,SAAUpB,GAAOA,GACvB,iCACE,wBAAIqB,UAAU,gBACXjB,EAAKG,KAAI,SAAAC,GACR,OACE,wBAAIc,IAAKd,UAAO,IACd,kBAAC,IAAD,CACEe,KAAI,SAAWC,IAAUhB,UAAO,IAA5B,IACJC,KAAMD,UAAO,WAOzB,6BACEiB,wBAAyB,CAAEC,OAAM,UAAE7B,aAAF,EAAEA,EAAM8B,YAAR,QAAgB,qBASpD,IAAMC,EAAQ,c","file":"component---src-templates-blog-post-tsx-b727de05c4c9de594607.js","sourcesContent":["import './blog-post.scss'\nimport { BlogPostQuery } from './__generated__/BlogPostQuery'\nimport Layout from '../components/Layout'\nimport React from 'react'\nimport SEO from '../components/SEO'\nimport Tag from '../components/Tag'\nimport { graphql } from 'gatsby'\nimport kebabCase from 'lodash/kebabCase'\n\n/**\n * Generates the Schema.org SEO for the blog\n * @param title Title of the blog post\n * @param date Date of the blog post\n */\nfunction blogSEO(\n  title: string,\n  date: string,\n  author: string\n): {\n  type: string\n  content: string\n} {\n  return {\n    type: 'application/ld+json',\n    content: JSON.stringify({\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      author: {\n        '@type': 'Person',\n        name: author,\n      },\n      datePublished: date,\n      headline: title,\n      name: title,\n    }),\n  }\n}\n\n/**\n * Page template for a single blog post\n */\nconst BlogPost: React.FC<{ data: BlogPostQuery }> = ({ data }) => {\n  const post = data.post\n  const title = post?.frontmatter.title ?? 'Missing title'\n  const date = (post?.frontmatter.date as string) ?? ''\n  const author = data.siteData?.siteMetadata.author ?? ''\n  const tags = (post?.frontmatter?.tags ?? []).sort()\n  const tagsSEO = tags.map(tag => {\n    return {\n      name: 'article:tag',\n      content: tag ?? '',\n    }\n  })\n  const schemaSEO = blogSEO(title, date, author)\n\n  return (\n    <Layout>\n      <SEO title={title} type=\"article\" meta={tagsSEO} script={schemaSEO} />\n      <article>\n        <h1>{title}</h1>\n        <time dateTime={date}>{date}</time>\n        <section>\n          <ul className=\"BlogTagsList\">\n            {tags.map(tag => {\n              return (\n                <li key={tag ?? ''}>\n                  <Tag\n                    link={`/tags/${kebabCase(tag ?? '')}/`}\n                    name={tag ?? ''}\n                  />\n                </li>\n              )\n            })}\n          </ul>\n        </section>\n        <section\n          dangerouslySetInnerHTML={{ __html: post?.html ?? 'Missing body' }}\n        />\n      </article>\n    </Layout>\n  )\n}\n\nexport default BlogPost\n\nexport const query = graphql`\n  query BlogPostQuery($slug: String!) {\n    siteData: site {\n      siteMetadata {\n        author\n      }\n    }\n    post: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"yyyy-MM-DD\")\n        tags\n      }\n    }\n  }\n`\n"],"sourceRoot":""}