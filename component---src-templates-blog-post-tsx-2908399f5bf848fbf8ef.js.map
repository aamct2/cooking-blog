{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx"],"names":["BlogPost","post","data","markdownRemark","title","frontmatter","date","tags","sort","tagsSEO","map","tag","name","content","schemaSEO","type","JSON","stringify","datePublished","headline","blogSEO","meta","script","dateTime","className","key","link","kebabCase","dangerouslySetInnerHTML","__html","html","query"],"mappings":"8OA6EeA,UAzCqC,SAAC,GAAa,kBAC1DC,EAD0D,EAAXC,KACnCC,eACZC,EAAK,UAAGH,SAAH,UAAGA,EAAMI,mBAAT,aAAG,EAAmBD,aAAtB,QAA+B,gBACpCE,EAAI,QAAI,EAAAL,SAAJ,UAAIA,EAAMI,mBAAV,aAAI,EAAmBC,YAAvB,QAA0C,GAC9CC,GAAO,UAACN,SAAD,UAACA,EAAMI,mBAAP,aAAC,EAAmBE,YAApB,QAA4B,IAAIC,OACvCC,EAAUF,EAAKG,KAAI,SAAAC,GACvB,MAAO,CACLC,KAAM,cACNC,QAASF,UAAO,OAGdG,EAjCR,SACEV,EACAE,GAKA,MAAO,CACLS,KAAM,sBACNF,QAASG,KAAKC,UAAU,CACtB,WAAY,oBACZ,QAAS,cACTC,cAAeZ,EACfM,KAAMR,EACNe,SAAUf,KAmBIgB,CAAQhB,EAAOE,GAEjC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKF,MAAOA,EAAOW,KAAK,UAAUM,KAAMZ,EAASa,OAAQR,IACzD,iCACE,4BAAKV,GACL,0BAAMmB,SAAUjB,GAAOA,GACvB,iCACE,wBAAIkB,UAAU,gBACXjB,EAAKG,KAAI,SAAAC,GACR,OACE,wBAAIc,IAAKd,UAAO,IACd,kBAAC,IAAD,CACEe,KAAI,SAAWC,IAAUhB,UAAO,IAA5B,IACJC,KAAMD,UAAO,WAOzB,6BACEiB,wBAAyB,CAAEC,OAAM,UAAE5B,aAAF,EAAEA,EAAM6B,YAAR,QAAgB,qBASpD,IAAMC,EAAQ,c","file":"component---src-templates-blog-post-tsx-2908399f5bf848fbf8ef.js","sourcesContent":["import './blog-post.scss'\nimport { BlogPostQuery } from './__generated__/BlogPostQuery'\nimport Layout from '../components/Layout'\nimport React from 'react'\nimport SEO from '../components/SEO'\nimport Tag from '../components/Tag'\nimport { graphql } from 'gatsby'\nimport kebabCase from 'lodash/kebabCase'\n\n/**\n * Generates the Schema.org SEO for the blog\n * @param title Title of the blog post\n * @param date Date of the blog post\n */\nfunction blogSEO(\n  title: string,\n  date: string\n): {\n  type: string\n  content: string\n} {\n  return {\n    type: 'application/ld+json',\n    content: JSON.stringify({\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      datePublished: date,\n      name: title,\n      headline: title,\n    }),\n  }\n}\n\n/**\n * Page template for a single blog post\n */\nconst BlogPost: React.FC<{ data: BlogPostQuery }> = ({ data }) => {\n  const post = data.markdownRemark\n  const title = post?.frontmatter?.title ?? 'Missing title'\n  const date = (post?.frontmatter?.date as string) ?? ''\n  const tags = (post?.frontmatter?.tags ?? []).sort()\n  const tagsSEO = tags.map(tag => {\n    return {\n      name: 'article:tag',\n      content: tag ?? '',\n    }\n  })\n  const schemaSEO = blogSEO(title, date)\n\n  return (\n    <Layout>\n      <SEO title={title} type=\"article\" meta={tagsSEO} script={schemaSEO} />\n      <article>\n        <h1>{title}</h1>\n        <time dateTime={date}>{date}</time>\n        <section>\n          <ul className=\"BlogTagsList\">\n            {tags.map(tag => {\n              return (\n                <li key={tag ?? ''}>\n                  <Tag\n                    link={`/tags/${kebabCase(tag ?? '')}/`}\n                    name={tag ?? ''}\n                  />\n                </li>\n              )\n            })}\n          </ul>\n        </section>\n        <section\n          dangerouslySetInnerHTML={{ __html: post?.html ?? 'Missing body' }}\n        />\n      </article>\n    </Layout>\n  )\n}\n\nexport default BlogPost\n\nexport const query = graphql`\n  query BlogPostQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"yyyy-MM-DD\")\n        tags\n      }\n    }\n  }\n`\n"],"sourceRoot":""}