{"version":3,"sources":["webpack:///./src/components/BlogCard.tsx","webpack:///./src/templates/blog-list.tsx"],"names":["BlogCard","date","image","slug","title","to","className","alt","src","dateTime","BlogList","data","pageContext","posts","allMarkdownRemark","edges","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","map","node","frontmatter","key","id","featuredImage","childImageSharp","fixed","fields","rel","blogListQuery"],"mappings":"6FAAA,+CAmCeA,IAnBV,SAAC,GAAiC,IAA/BC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACE,kBAAC,OAAD,CAAMC,GAAIF,GACR,yBAAKG,UAAU,YACb,yBAAKC,IAAI,GAAGC,IAAKN,IACjB,yBAAKI,UAAU,mBACb,wBAAIA,UAAU,iBACZ,0BAAMA,UAAU,mBAAmBF,IAErC,yBAAKE,UAAU,mBACf,0BAAMA,UAAU,eAAeG,SAAUR,GACvC,0BAAMK,UAAU,mBAAmBL,S,kCC3B/C,8HA8DeS,UA9CV,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACNC,EAAQF,EAAKG,kBAAkBC,MAE7BC,EAA0BJ,EAA1BI,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAFmBJ,EAAbO,SAGfC,EACJJ,EAAc,GAAM,EAAI,QAAU,OAASA,EAAc,GAAGK,WACxDC,GAAYL,EAAU,SAAW,QAAUD,EAAc,GAAGK,WAElE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKjB,MAAM,SACX,oCAECS,EAAMU,KAAI,YAAc,QAAXC,EAAW,EAAXA,KACZ,OACE,kBAAC,IAAD,CACEvB,KAAMuB,EAAKC,YAAYxB,KACvByB,IAAKF,EAAKG,GACVzB,MAAK,UAAEsB,EAAKC,YAAYG,cAAcC,uBAAjC,iBAAE,EAAgDC,aAAlD,aAAE,EAAuDtB,IAC9DL,KAAMqB,EAAKO,OAAO5B,KAClBC,MAAOoB,EAAKC,YAAYrB,YAK5Ba,GACA,kBAAC,OAAD,CAAMZ,GAAIe,EAAUY,IAAI,QAAxB,oBASAd,GACA,kBAAC,OAAD,CAAMb,GAAIiB,EAAUU,IAAI,QAAxB,iBAUD,IAAMC,EAAgB,c","file":"component---src-templates-blog-list-tsx-37125d0f6662f87bcf84.js","sourcesContent":["import './BlogCard.scss'\nimport { Link } from 'gatsby'\nimport React from 'react'\n\n/**\n * Card summary of a blog post\n * @param date Date of the blog post as a formatted `string`\n * @param excerpt Excerpt text from the blog\n * @param slug Slug (relative URL) for the post\n * @param title Title of hte blog\n */\nconst BlogCard: React.FC<{\n  date: string\n  image?: string\n  slug: string\n  title: string\n}> = ({ date, image, slug, title }) => {\n  return (\n    <Link to={slug}>\n      <div className=\"BlogCard\">\n        <img alt=\"\" src={image} />\n        <div className=\"BlogCardContent\">\n          <h3 className=\"BlogCardTitle\">\n            <span className=\"BlogCardOverlay\">{title}</span>\n          </h3>\n          <div className=\"BlogCardSpacer\" />\n          <time className=\"BlogCardDate\" dateTime={date}>\n            <span className=\"BlogCardOverlay\">{date}</span>\n          </time>\n        </div>\n      </div>\n    </Link>\n  )\n}\n\nexport default BlogCard\n","import Layout from '../components/Layout'\n// This must be imported first to ensure CSS order in production builds\n\n// eslint-disable-next-line sort-imports\nimport { Link, graphql } from 'gatsby'\nimport BlogCard from '../components/BlogCard'\nimport { BlogListQuery } from './__generated__/BlogListQuery'\nimport React from 'react'\nimport SEO from '../components/SEO'\n\n/**\n * Template page containing a list of blog posts\n */\nconst BlogList: React.FC<{\n  data: BlogListQuery\n  pageContext: { currentPage: number; numPages: number }\n}> = ({ data, pageContext }) => {\n  const posts = data.allMarkdownRemark.edges\n\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage =\n    currentPage - 1 === 1 ? '/blog' : '../' + (currentPage - 1).toString()\n  const nextPage = (isFirst ? '/blog/' : '../') + (currentPage + 1).toString()\n\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <h1>Blog</h1>\n\n      {posts.map(({ node }) => {\n        return (\n          <BlogCard\n            date={node.frontmatter.date}\n            key={node.id}\n            image={node.frontmatter.featuredImage.childImageSharp?.fixed?.src}\n            slug={node.fields.slug}\n            title={node.frontmatter.title}\n          />\n        )\n      })}\n\n      {!isFirst && (\n        <Link to={prevPage} rel=\"prev\">\n          ← Previous Page\n        </Link>\n      )}\n      {/* {Array.from({ length: numPages }, (_, i) => (\n        <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? '' : i + 1}`}>\n          {i + 1}\n        </Link>\n      ))} */}\n      {!isLast && (\n        <Link to={nextPage} rel=\"next\">\n          Next Page →\n        </Link>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const blogListQuery = graphql`\n  query BlogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"yyyy-MM-DD\")\n            featuredImage {\n              childImageSharp {\n                fixed(width: 720) {\n                  src\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}