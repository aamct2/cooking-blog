{"version":3,"sources":["webpack:///./src/components/BlogSummary.tsx","webpack:///./src/templates/blog-list.tsx"],"names":["BlogSummary","date","excerpt","slug","title","summary","blogExcerpt","to","blogListQuery","BlogList","data","pageContext","posts","allMarkdownRemark","edges","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","Layout","SEO","map","node","frontmatter","key","id","fields","rel"],"mappings":"yMAsBA,IAkBeA,EAbV,SAAC,GAAmC,IAAjCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACrBC,EArBR,SAAqBH,GACnB,OAAIA,EACK,2BAAIA,GAGN,KAgBSI,CAAYJ,GAE5B,OACE,6BACE,kBAAC,OAAD,CAAMK,GAAIJ,GACR,4BAAKC,EAAQ,MAAQH,IAEtBI,I,wBC0BMG,GAFEC,UA9CV,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACNC,EAAQF,EAAKG,kBAAkBC,MAE7BC,EAA0BJ,EAA1BI,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAFmBJ,EAAbO,SAGfC,EACJJ,EAAc,GAAM,EAAI,QAAU,OAASA,EAAc,GAAGK,WACxDC,GAAYL,EAAU,SAAW,QAAUD,EAAc,GAAGK,WAElE,OACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKnB,MAAM,SACX,oCAECQ,EAAMY,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACZ,OACE,kBAAC,EAAD,CACExB,KAAMwB,EAAKC,YAAYzB,KACvBC,QAASuB,EAAKvB,QACdyB,IAAKF,EAAKG,GACVzB,KAAMsB,EAAKI,OAAO1B,KAClBC,MAAOqB,EAAKC,YAAYtB,YAK5BY,GACA,kBAAC,OAAD,CAAMT,GAAIY,EAAUW,IAAI,QAAxB,oBASAb,GACA,kBAAC,OAAD,CAAMV,GAAIc,EAAUS,IAAI,QAAxB,iBAUqB","file":"component---src-templates-blog-list-tsx-576e5919da5d9cc1ff9e.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\n/**\n * Generates an excerpt summary representation\n * @param excerpt Excerpt text\n */\nfunction blogExcerpt(excerpt: string | null): JSX.Element | null {\n  if (excerpt) {\n    return <p>{excerpt}</p>\n  }\n\n  return null\n}\n\n/**\n * Summary of a blog post\n * @param date Date of the blog post as a formatted `string`\n * @param excerpt Excerpt text from the blog\n * @param slug Slug (relative URL) for the post\n * @param title Title of hte blog\n */\nconst BlogSummary: React.FC<{\n  date: string\n  excerpt: string | null\n  slug: string\n  title: string\n}> = ({ date, excerpt, slug, title }) => {\n  const summary = blogExcerpt(excerpt)\n\n  return (\n    <div>\n      <Link to={slug}>\n        <h4>{title + ' - ' + date}</h4>\n      </Link>\n      {summary}\n    </div>\n  )\n}\n\nexport default BlogSummary\n","import { Link, graphql } from 'gatsby'\nimport { BlogListQuery } from './__generated__/BlogListQuery'\nimport BlogSummary from '../components/BlogSummary'\nimport Layout from '../components/Layout'\nimport React from 'react'\nimport SEO from '../components/SEO'\n\n/**\n * Template page containing a list of blog posts\n */\nconst BlogList: React.FC<{\n  data: BlogListQuery\n  pageContext: { currentPage: number; numPages: number }\n}> = ({ data, pageContext }) => {\n  const posts = data.allMarkdownRemark.edges\n\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage =\n    currentPage - 1 === 1 ? '/blog' : '../' + (currentPage - 1).toString()\n  const nextPage = (isFirst ? '/blog/' : '../') + (currentPage + 1).toString()\n\n  return (\n    <Layout>\n      <SEO title=\"Blog\" />\n      <h1>Blog</h1>\n\n      {posts.map(({ node }) => {\n        return (\n          <BlogSummary\n            date={node.frontmatter.date}\n            excerpt={node.excerpt}\n            key={node.id}\n            slug={node.fields.slug}\n            title={node.frontmatter.title}\n          />\n        )\n      })}\n\n      {!isFirst && (\n        <Link to={prevPage} rel=\"prev\">\n          ← Previous Page\n        </Link>\n      )}\n      {/* {Array.from({ length: numPages }, (_, i) => (\n        <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? '' : i + 1}`}>\n          {i + 1}\n        </Link>\n      ))} */}\n      {!isLast && (\n        <Link to={nextPage} rel=\"next\">\n          Next Page →\n        </Link>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const blogListQuery = graphql`\n  query BlogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"yyyy-MM-DD\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}