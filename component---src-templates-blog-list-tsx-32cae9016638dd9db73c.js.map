{"version":3,"sources":["webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/templates/blog-list.tsx"],"names":["Header","siteTitle","style","margin","to","Layout","children","data","site","siteMetadata","title","Date","getFullYear","href","BlogList","pageContext","posts","allMarkdownRemark","edges","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","map","node","frontmatter","key","fields","slug","rel","blogListQuery"],"mappings":"8IAaeA,EAViC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAC9C,gCACE,6BACE,wBAAIC,MAAO,CAAEC,OAAQ,IACnB,kBAAC,OAAD,CAAMC,GAAG,KAAKH,OCmCPI,IA7B6B,SAAC,GAAiB,UAAfC,EAAe,EAAfA,SACvCC,EAAO,OAUb,OACE,oCACE,kBAAC,EAAD,CAAQN,UAAS,oBAAEM,EAAKC,YAAP,iBAAE,EAAWC,oBAAb,aAAE,EAAyBC,aAA3B,QAAoC,KACrD,oCACE,8BAAOJ,GACP,sCACK,IAAIK,MAAOC,cADhB,eAC2C,IACzC,uBAAGC,KAAK,4BAAR,e,2QCaKC,UApCV,SAAC,GAA0B,IAAxBP,EAAwB,EAAxBA,KAAMQ,EAAkB,EAAlBA,YACNC,EAAQT,EAAKU,kBAAkBC,MAE7BC,EAA0BJ,EAA1BI,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAFmBJ,EAAbO,SAGfC,EACJJ,EAAc,GAAM,EAAI,QAAU,OAASA,EAAc,GAAGK,WACxDC,GAAYL,EAAU,SAAW,QAAUD,EAAc,GAAGK,WAElE,OACE,kBAAC,IAAD,KACGR,EAAMU,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNjB,EAAQiB,EAAKC,YAAYlB,MAC/B,OAAO,yBAAKmB,IAAKF,EAAKG,OAAOC,MAAOrB,OAGpCU,GACA,kBAAC,OAAD,CAAMhB,GAAImB,EAAUS,IAAI,QAAxB,oBASAX,GACA,kBAAC,OAAD,CAAMjB,GAAIqB,EAAUO,IAAI,QAAxB,iBAUD,IAAMC,EAAgB","file":"component---src-templates-blog-list-tsx-32cae9016638dd9db73c.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nconst Header: React.FC<{ siteTitle: string }> = ({ siteTitle }) => (\n  <header>\n    <div>\n      <h1 style={{ margin: 0 }}>\n        <Link to=\"/\">{siteTitle}</Link>\n      </h1>\n    </div>\n  </header>\n)\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport { graphql, useStaticQuery } from 'gatsby'\nimport Header from './header'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { SiteTitleQuery } from './__generated__/SiteTitleQuery'\n\nconst Layout: React.FC<{ children: any }> = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `) as SiteTitleQuery\n\n  return (\n    <>\n      <Header siteTitle={data.site?.siteMetadata?.title ?? ''} />\n      <>\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with{' '}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import { Link, graphql } from 'gatsby'\nimport { BlogListQuery } from './__generated__/BlogListQuery'\nimport Layout from '../components/layout'\nimport React from 'react'\n\nconst BlogList: React.FC<{\n  data: BlogListQuery\n  pageContext: { currentPage: number; numPages: number }\n}> = ({ data, pageContext }) => {\n  const posts = data.allMarkdownRemark.edges\n\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage =\n    currentPage - 1 === 1 ? '/blog' : '../' + (currentPage - 1).toString()\n  const nextPage = (isFirst ? '/blog/' : '../') + (currentPage + 1).toString()\n\n  return (\n    <Layout>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title\n        return <div key={node.fields.slug}>{title}</div>\n      })}\n\n      {!isFirst && (\n        <Link to={prevPage} rel=\"prev\">\n          ← Previous Page\n        </Link>\n      )}\n      {/* {Array.from({ length: numPages }, (_, i) => (\n        <Link key={`pagination-number${i + 1}`} to={`/${i === 0 ? '' : i + 1}`}>\n          {i + 1}\n        </Link>\n      ))} */}\n      {!isLast && (\n        <Link to={nextPage} rel=\"next\">\n          Next Page →\n        </Link>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const blogListQuery = graphql`\n  query BlogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}